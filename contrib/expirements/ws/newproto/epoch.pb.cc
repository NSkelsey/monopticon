// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epoch.proto

#include "epoch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddrAssoc_epoch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArpAssoc_epoch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceComm_epoch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Summary_epoch_2eproto;
namespace epoch {
class L2SummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L2Summary> _instance;
} _L2Summary_default_instance_;
class DeviceCommDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceComm> _instance;
} _DeviceComm_default_instance_;
class AddrAssocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddrAssoc> _instance;
} _AddrAssoc_default_instance_;
class ArpAssocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArpAssoc> _instance;
} _ArpAssoc_default_instance_;
class EpochStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochStep> _instance;
} _EpochStep_default_instance_;
}  // namespace epoch
static void InitDefaultsscc_info_AddrAssoc_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_AddrAssoc_default_instance_;
    new (ptr) ::epoch::AddrAssoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::AddrAssoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddrAssoc_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddrAssoc_epoch_2eproto}, {}};

static void InitDefaultsscc_info_ArpAssoc_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_ArpAssoc_default_instance_;
    new (ptr) ::epoch::ArpAssoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::ArpAssoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArpAssoc_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ArpAssoc_epoch_2eproto}, {
      &scc_info_AddrAssoc_epoch_2eproto.base,}};

static void InitDefaultsscc_info_DeviceComm_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_DeviceComm_default_instance_;
    new (ptr) ::epoch::DeviceComm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::DeviceComm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceComm_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeviceComm_epoch_2eproto}, {
      &scc_info_L2Summary_epoch_2eproto.base,}};

static void InitDefaultsscc_info_EpochStep_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_EpochStep_default_instance_;
    new (ptr) ::epoch::EpochStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::EpochStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EpochStep_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_EpochStep_epoch_2eproto}, {
      &scc_info_DeviceComm_epoch_2eproto.base,
      &scc_info_AddrAssoc_epoch_2eproto.base,
      &scc_info_ArpAssoc_epoch_2eproto.base,}};

static void InitDefaultsscc_info_L2Summary_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_L2Summary_default_instance_;
    new (ptr) ::epoch::L2Summary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::L2Summary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Summary_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_L2Summary_epoch_2eproto}, {}};

namespace epoch {

// ===================================================================

void L2Summary::InitAsDefaultInstance() {
}
class L2Summary::_Internal {
 public:
};

L2Summary::L2Summary()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epoch.L2Summary)
}
L2Summary::L2Summary(const L2Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mac_dst_, &from.mac_dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_) -
    reinterpret_cast<char*>(&mac_dst_)) + sizeof(unknown_));
  // @@protoc_insertion_point(copy_constructor:epoch.L2Summary)
}

void L2Summary::SharedCtor() {
  ::memset(&mac_dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&mac_dst_)) + sizeof(unknown_));
}

L2Summary::~L2Summary() {
  // @@protoc_insertion_point(destructor:epoch.L2Summary)
  SharedDtor();
}

void L2Summary::SharedDtor() {
}

void L2Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L2Summary& L2Summary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L2Summary_epoch_2eproto.base);
  return *internal_default_instance();
}


void L2Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.L2Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mac_dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&mac_dst_)) + sizeof(unknown_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* L2Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // uint32 ipv4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ipv6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 arp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          arp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unknown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool L2Summary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:epoch.L2Summary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 mac_dst = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mac_dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipv4 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipv6 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 arp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unknown = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epoch.L2Summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epoch.L2Summary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void L2Summary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epoch.L2Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_dst = 1;
  if (this->mac_dst() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->mac_dst(), output);
  }

  // uint32 ipv4 = 2;
  if (this->ipv4() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ipv4(), output);
  }

  // uint32 ipv6 = 3;
  if (this->ipv6() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ipv6(), output);
  }

  // uint32 arp = 4;
  if (this->arp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->arp(), output);
  }

  // uint32 unknown = 5;
  if (this->unknown() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->unknown(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:epoch.L2Summary)
}

size_t L2Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.L2Summary)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 mac_dst = 1;
  if (this->mac_dst() != 0) {
    total_size += 1 + 8;
  }

  // uint32 ipv4 = 2;
  if (this->ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ipv4());
  }

  // uint32 ipv6 = 3;
  if (this->ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ipv6());
  }

  // uint32 arp = 4;
  if (this->arp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->arp());
  }

  // uint32 unknown = 5;
  if (this->unknown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->unknown());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L2Summary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const L2Summary*>(
      &from));
}

void L2Summary::MergeFrom(const L2Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.L2Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac_dst() != 0) {
    set_mac_dst(from.mac_dst());
  }
  if (from.ipv4() != 0) {
    set_ipv4(from.ipv4());
  }
  if (from.ipv6() != 0) {
    set_ipv6(from.ipv6());
  }
  if (from.arp() != 0) {
    set_arp(from.arp());
  }
  if (from.unknown() != 0) {
    set_unknown(from.unknown());
  }
}

void L2Summary::CopyFrom(const L2Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.L2Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2Summary::IsInitialized() const {
  return true;
}

void L2Summary::InternalSwap(L2Summary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mac_dst_, other->mac_dst_);
  swap(ipv4_, other->ipv4_);
  swap(ipv6_, other->ipv6_);
  swap(arp_, other->arp_);
  swap(unknown_, other->unknown_);
}

std::string L2Summary::GetTypeName() const {
  return "epoch.L2Summary";
}


// ===================================================================

void DeviceComm::InitAsDefaultInstance() {
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_33_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_ff_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_01_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_xx_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
}
class DeviceComm::_Internal {
 public:
  static const ::epoch::L2Summary& bcast_33(const DeviceComm* msg);
  static const ::epoch::L2Summary& bcast_ff(const DeviceComm* msg);
  static const ::epoch::L2Summary& bcast_01(const DeviceComm* msg);
  static const ::epoch::L2Summary& bcast_xx(const DeviceComm* msg);
};

const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_33(const DeviceComm* msg) {
  return *msg->bcast_33_;
}
const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_ff(const DeviceComm* msg) {
  return *msg->bcast_ff_;
}
const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_01(const DeviceComm* msg) {
  return *msg->bcast_01_;
}
const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_xx(const DeviceComm* msg) {
  return *msg->bcast_xx_;
}
DeviceComm::DeviceComm()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epoch.DeviceComm)
}
DeviceComm::DeviceComm(const DeviceComm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      tx_summary_(from.tx_summary_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bcast_33()) {
    bcast_33_ = new ::epoch::L2Summary(*from.bcast_33_);
  } else {
    bcast_33_ = nullptr;
  }
  if (from.has_bcast_ff()) {
    bcast_ff_ = new ::epoch::L2Summary(*from.bcast_ff_);
  } else {
    bcast_ff_ = nullptr;
  }
  if (from.has_bcast_01()) {
    bcast_01_ = new ::epoch::L2Summary(*from.bcast_01_);
  } else {
    bcast_01_ = nullptr;
  }
  if (from.has_bcast_xx()) {
    bcast_xx_ = new ::epoch::L2Summary(*from.bcast_xx_);
  } else {
    bcast_xx_ = nullptr;
  }
  mac_src_ = from.mac_src_;
  // @@protoc_insertion_point(copy_constructor:epoch.DeviceComm)
}

void DeviceComm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceComm_epoch_2eproto.base);
  ::memset(&bcast_33_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mac_src_) -
      reinterpret_cast<char*>(&bcast_33_)) + sizeof(mac_src_));
}

DeviceComm::~DeviceComm() {
  // @@protoc_insertion_point(destructor:epoch.DeviceComm)
  SharedDtor();
}

void DeviceComm::SharedDtor() {
  if (this != internal_default_instance()) delete bcast_33_;
  if (this != internal_default_instance()) delete bcast_ff_;
  if (this != internal_default_instance()) delete bcast_01_;
  if (this != internal_default_instance()) delete bcast_xx_;
}

void DeviceComm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceComm& DeviceComm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceComm_epoch_2eproto.base);
  return *internal_default_instance();
}


void DeviceComm::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.DeviceComm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_summary_.Clear();
  if (GetArenaNoVirtual() == nullptr && bcast_33_ != nullptr) {
    delete bcast_33_;
  }
  bcast_33_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bcast_ff_ != nullptr) {
    delete bcast_ff_;
  }
  bcast_ff_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bcast_01_ != nullptr) {
    delete bcast_01_;
  }
  bcast_01_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bcast_xx_ != nullptr) {
    delete bcast_xx_;
  }
  bcast_xx_ = nullptr;
  mac_src_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceComm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.L2Summary tx_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tx_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_33 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bcast_33(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_ff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bcast_ff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_01 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_bcast_01(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_xx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_bcast_xx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceComm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:epoch.DeviceComm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 mac_src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mac_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .epoch.L2Summary tx_summary = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tx_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epoch.L2Summary bcast_33 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bcast_33()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epoch.L2Summary bcast_ff = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bcast_ff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epoch.L2Summary bcast_01 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bcast_01()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epoch.L2Summary bcast_xx = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bcast_xx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epoch.DeviceComm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epoch.DeviceComm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceComm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epoch.DeviceComm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->mac_src(), output);
  }

  // repeated .epoch.L2Summary tx_summary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_summary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->tx_summary(static_cast<int>(i)),
      output);
  }

  // .epoch.L2Summary bcast_33 = 3;
  if (this->has_bcast_33()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::bcast_33(this), output);
  }

  // .epoch.L2Summary bcast_ff = 4;
  if (this->has_bcast_ff()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::bcast_ff(this), output);
  }

  // .epoch.L2Summary bcast_01 = 5;
  if (this->has_bcast_01()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::bcast_01(this), output);
  }

  // .epoch.L2Summary bcast_xx = 6;
  if (this->has_bcast_xx()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::bcast_xx(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:epoch.DeviceComm)
}

size_t DeviceComm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.DeviceComm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch.L2Summary tx_summary = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_summary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tx_summary(static_cast<int>(i)));
    }
  }

  // .epoch.L2Summary bcast_33 = 3;
  if (this->has_bcast_33()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_33_);
  }

  // .epoch.L2Summary bcast_ff = 4;
  if (this->has_bcast_ff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_ff_);
  }

  // .epoch.L2Summary bcast_01 = 5;
  if (this->has_bcast_01()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_01_);
  }

  // .epoch.L2Summary bcast_xx = 6;
  if (this->has_bcast_xx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_xx_);
  }

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceComm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceComm*>(
      &from));
}

void DeviceComm::MergeFrom(const DeviceComm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.DeviceComm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_summary_.MergeFrom(from.tx_summary_);
  if (from.has_bcast_33()) {
    mutable_bcast_33()->::epoch::L2Summary::MergeFrom(from.bcast_33());
  }
  if (from.has_bcast_ff()) {
    mutable_bcast_ff()->::epoch::L2Summary::MergeFrom(from.bcast_ff());
  }
  if (from.has_bcast_01()) {
    mutable_bcast_01()->::epoch::L2Summary::MergeFrom(from.bcast_01());
  }
  if (from.has_bcast_xx()) {
    mutable_bcast_xx()->::epoch::L2Summary::MergeFrom(from.bcast_xx());
  }
  if (from.mac_src() != 0) {
    set_mac_src(from.mac_src());
  }
}

void DeviceComm::CopyFrom(const DeviceComm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.DeviceComm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceComm::IsInitialized() const {
  return true;
}

void DeviceComm::InternalSwap(DeviceComm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tx_summary_)->InternalSwap(CastToBase(&other->tx_summary_));
  swap(bcast_33_, other->bcast_33_);
  swap(bcast_ff_, other->bcast_ff_);
  swap(bcast_01_, other->bcast_01_);
  swap(bcast_xx_, other->bcast_xx_);
  swap(mac_src_, other->mac_src_);
}

std::string DeviceComm::GetTypeName() const {
  return "epoch.DeviceComm";
}


// ===================================================================

void AddrAssoc::InitAsDefaultInstance() {
}
class AddrAssoc::_Internal {
 public:
};

AddrAssoc::AddrAssoc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epoch.AddrAssoc)
}
AddrAssoc::AddrAssoc(const AddrAssoc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mac_src_, &from.mac_src_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4_) -
    reinterpret_cast<char*>(&mac_src_)) + sizeof(ipv4_));
  // @@protoc_insertion_point(copy_constructor:epoch.AddrAssoc)
}

void AddrAssoc::SharedCtor() {
  ::memset(&mac_src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&mac_src_)) + sizeof(ipv4_));
}

AddrAssoc::~AddrAssoc() {
  // @@protoc_insertion_point(destructor:epoch.AddrAssoc)
  SharedDtor();
}

void AddrAssoc::SharedDtor() {
}

void AddrAssoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddrAssoc& AddrAssoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddrAssoc_epoch_2eproto.base);
  return *internal_default_instance();
}


void AddrAssoc::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.AddrAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mac_src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&mac_src_)) + sizeof(ipv4_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddrAssoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed32 ipv4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddrAssoc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:epoch.AddrAssoc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 mac_src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mac_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ipv4 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epoch.AddrAssoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epoch.AddrAssoc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddrAssoc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epoch.AddrAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->mac_src(), output);
  }

  // fixed32 ipv4 = 2;
  if (this->ipv4() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(2, this->ipv4(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:epoch.AddrAssoc)
}

size_t AddrAssoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.AddrAssoc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 ipv4 = 2;
  if (this->ipv4() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddrAssoc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddrAssoc*>(
      &from));
}

void AddrAssoc::MergeFrom(const AddrAssoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.AddrAssoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac_src() != 0) {
    set_mac_src(from.mac_src());
  }
  if (from.ipv4() != 0) {
    set_ipv4(from.ipv4());
  }
}

void AddrAssoc::CopyFrom(const AddrAssoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.AddrAssoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrAssoc::IsInitialized() const {
  return true;
}

void AddrAssoc::InternalSwap(AddrAssoc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mac_src_, other->mac_src_);
  swap(ipv4_, other->ipv4_);
}

std::string AddrAssoc::GetTypeName() const {
  return "epoch.AddrAssoc";
}


// ===================================================================

void ArpAssoc::InitAsDefaultInstance() {
}
class ArpAssoc::_Internal {
 public:
};

ArpAssoc::ArpAssoc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epoch.ArpAssoc)
}
ArpAssoc::ArpAssoc(const ArpAssoc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      table_row_(from.table_row_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_src_ = from.mac_src_;
  // @@protoc_insertion_point(copy_constructor:epoch.ArpAssoc)
}

void ArpAssoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArpAssoc_epoch_2eproto.base);
  mac_src_ = PROTOBUF_ULONGLONG(0);
}

ArpAssoc::~ArpAssoc() {
  // @@protoc_insertion_point(destructor:epoch.ArpAssoc)
  SharedDtor();
}

void ArpAssoc::SharedDtor() {
}

void ArpAssoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArpAssoc& ArpAssoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArpAssoc_epoch_2eproto.base);
  return *internal_default_instance();
}


void ArpAssoc::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.ArpAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_row_.Clear();
  mac_src_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArpAssoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.AddrAssoc table_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_table_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArpAssoc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:epoch.ArpAssoc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 mac_src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mac_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .epoch.AddrAssoc table_row = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_table_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epoch.ArpAssoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epoch.ArpAssoc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArpAssoc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epoch.ArpAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->mac_src(), output);
  }

  // repeated .epoch.AddrAssoc table_row = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_row_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->table_row(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:epoch.ArpAssoc)
}

size_t ArpAssoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.ArpAssoc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch.AddrAssoc table_row = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->table_row_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->table_row(static_cast<int>(i)));
    }
  }

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArpAssoc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ArpAssoc*>(
      &from));
}

void ArpAssoc::MergeFrom(const ArpAssoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.ArpAssoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_row_.MergeFrom(from.table_row_);
  if (from.mac_src() != 0) {
    set_mac_src(from.mac_src());
  }
}

void ArpAssoc::CopyFrom(const ArpAssoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.ArpAssoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArpAssoc::IsInitialized() const {
  return true;
}

void ArpAssoc::InternalSwap(ArpAssoc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&table_row_)->InternalSwap(CastToBase(&other->table_row_));
  swap(mac_src_, other->mac_src_);
}

std::string ArpAssoc::GetTypeName() const {
  return "epoch.ArpAssoc";
}


// ===================================================================

void EpochStep::InitAsDefaultInstance() {
}
class EpochStep::_Internal {
 public:
};

EpochStep::EpochStep()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epoch.EpochStep)
}
EpochStep::EpochStep(const EpochStep& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      enter_l2devices_(from.enter_l2devices_),
      l2_dev_comm_(from.l2_dev_comm_),
      enter_l2_ipv4_addr_src_(from.enter_l2_ipv4_addr_src_),
      enter_arp_table_(from.enter_arp_table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epoch.EpochStep)
}

void EpochStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EpochStep_epoch_2eproto.base);
}

EpochStep::~EpochStep() {
  // @@protoc_insertion_point(destructor:epoch.EpochStep)
  SharedDtor();
}

void EpochStep::SharedDtor() {
}

void EpochStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochStep& EpochStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochStep_epoch_2eproto.base);
  return *internal_default_instance();
}


void EpochStep::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.EpochStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enter_l2devices_.Clear();
  l2_dev_comm_.Clear();
  enter_l2_ipv4_addr_src_.Clear();
  enter_arp_table_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EpochStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 enter_l2devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_enter_l2devices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_enter_l2devices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.DeviceComm l2_dev_comm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_l2_dev_comm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_enter_l2_ipv4_addr_src(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.ArpAssoc enter_arp_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_enter_arp_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EpochStep::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:epoch.EpochStep)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 enter_l2devices = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_enter_l2devices())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 10u, input, this->mutable_enter_l2devices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .epoch.DeviceComm l2_dev_comm = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_l2_dev_comm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_enter_l2_ipv4_addr_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .epoch.ArpAssoc enter_arp_table = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_enter_arp_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epoch.EpochStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epoch.EpochStep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EpochStep::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epoch.EpochStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 enter_l2devices = 1;
  if (this->enter_l2devices_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_enter_l2devices_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64Array(
      this->enter_l2devices().data(), this->enter_l2devices_size(), output);
  }

  // repeated .epoch.DeviceComm l2_dev_comm = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->l2_dev_comm_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->l2_dev_comm(static_cast<int>(i)),
      output);
  }

  // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enter_l2_ipv4_addr_src_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->enter_l2_ipv4_addr_src(static_cast<int>(i)),
      output);
  }

  // repeated .epoch.ArpAssoc enter_arp_table = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enter_arp_table_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->enter_arp_table(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:epoch.EpochStep)
}

size_t EpochStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.EpochStep)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 enter_l2devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->enter_l2devices_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enter_l2devices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .epoch.DeviceComm l2_dev_comm = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->l2_dev_comm_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->l2_dev_comm(static_cast<int>(i)));
    }
  }

  // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->enter_l2_ipv4_addr_src_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->enter_l2_ipv4_addr_src(static_cast<int>(i)));
    }
  }

  // repeated .epoch.ArpAssoc enter_arp_table = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->enter_arp_table_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->enter_arp_table(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochStep::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EpochStep*>(
      &from));
}

void EpochStep::MergeFrom(const EpochStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.EpochStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enter_l2devices_.MergeFrom(from.enter_l2devices_);
  l2_dev_comm_.MergeFrom(from.l2_dev_comm_);
  enter_l2_ipv4_addr_src_.MergeFrom(from.enter_l2_ipv4_addr_src_);
  enter_arp_table_.MergeFrom(from.enter_arp_table_);
}

void EpochStep::CopyFrom(const EpochStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.EpochStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochStep::IsInitialized() const {
  return true;
}

void EpochStep::InternalSwap(EpochStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  enter_l2devices_.InternalSwap(&other->enter_l2devices_);
  CastToBase(&l2_dev_comm_)->InternalSwap(CastToBase(&other->l2_dev_comm_));
  CastToBase(&enter_l2_ipv4_addr_src_)->InternalSwap(CastToBase(&other->enter_l2_ipv4_addr_src_));
  CastToBase(&enter_arp_table_)->InternalSwap(CastToBase(&other->enter_arp_table_));
}

std::string EpochStep::GetTypeName() const {
  return "epoch.EpochStep";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epoch::L2Summary* Arena::CreateMaybeMessage< ::epoch::L2Summary >(Arena* arena) {
  return Arena::CreateInternal< ::epoch::L2Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::DeviceComm* Arena::CreateMaybeMessage< ::epoch::DeviceComm >(Arena* arena) {
  return Arena::CreateInternal< ::epoch::DeviceComm >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::AddrAssoc* Arena::CreateMaybeMessage< ::epoch::AddrAssoc >(Arena* arena) {
  return Arena::CreateInternal< ::epoch::AddrAssoc >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::ArpAssoc* Arena::CreateMaybeMessage< ::epoch::ArpAssoc >(Arena* arena) {
  return Arena::CreateInternal< ::epoch::ArpAssoc >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::EpochStep* Arena::CreateMaybeMessage< ::epoch::EpochStep >(Arena* arena) {
  return Arena::CreateInternal< ::epoch::EpochStep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
