// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epoch.proto

#include "epoch.pb.hpp"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddrAssoc_epoch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArpAssoc_epoch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceComm_epoch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epoch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Summary_epoch_2eproto;
namespace epoch {
class L2SummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L2Summary> _instance;
} _L2Summary_default_instance_;
class DeviceCommDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceComm> _instance;
} _DeviceComm_default_instance_;
class AddrAssocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddrAssoc> _instance;
} _AddrAssoc_default_instance_;
class ArpAssocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArpAssoc> _instance;
} _ArpAssoc_default_instance_;
class EpochStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochStep> _instance;
} _EpochStep_default_instance_;
}  // namespace epoch
static void InitDefaultsscc_info_AddrAssoc_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_AddrAssoc_default_instance_;
    new (ptr) ::epoch::AddrAssoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::AddrAssoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddrAssoc_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddrAssoc_epoch_2eproto}, {}};

static void InitDefaultsscc_info_ArpAssoc_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_ArpAssoc_default_instance_;
    new (ptr) ::epoch::ArpAssoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::ArpAssoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArpAssoc_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArpAssoc_epoch_2eproto}, {
      &scc_info_AddrAssoc_epoch_2eproto.base,}};

static void InitDefaultsscc_info_DeviceComm_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_DeviceComm_default_instance_;
    new (ptr) ::epoch::DeviceComm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::DeviceComm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceComm_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceComm_epoch_2eproto}, {
      &scc_info_L2Summary_epoch_2eproto.base,}};

static void InitDefaultsscc_info_EpochStep_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_EpochStep_default_instance_;
    new (ptr) ::epoch::EpochStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::EpochStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EpochStep_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EpochStep_epoch_2eproto}, {
      &scc_info_DeviceComm_epoch_2eproto.base,
      &scc_info_AddrAssoc_epoch_2eproto.base,
      &scc_info_ArpAssoc_epoch_2eproto.base,}};

static void InitDefaultsscc_info_L2Summary_epoch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epoch::_L2Summary_default_instance_;
    new (ptr) ::epoch::L2Summary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epoch::L2Summary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Summary_epoch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_L2Summary_epoch_2eproto}, {}};

namespace epoch {

// ===================================================================

void L2Summary::InitAsDefaultInstance() {
}
class L2Summary::_Internal {
 public:
};

L2Summary::L2Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epoch.L2Summary)
}
L2Summary::L2Summary(const L2Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&mac_dst_, &from.mac_dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_) -
    reinterpret_cast<char*>(&mac_dst_)) + sizeof(unknown_));
  // @@protoc_insertion_point(copy_constructor:epoch.L2Summary)
}

void L2Summary::SharedCtor() {
  ::memset(&mac_dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&mac_dst_)) + sizeof(unknown_));
}

L2Summary::~L2Summary() {
  // @@protoc_insertion_point(destructor:epoch.L2Summary)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void L2Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void L2Summary::ArenaDtor(void* object) {
  L2Summary* _this = reinterpret_cast< L2Summary* >(object);
  (void)_this;
}
void L2Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void L2Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L2Summary& L2Summary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L2Summary_epoch_2eproto.base);
  return *internal_default_instance();
}


void L2Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.L2Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mac_dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&mac_dst_)) + sizeof(unknown_));
  _internal_metadata_.Clear<std::string>();
}

const char* L2Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // uint32 ipv4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ipv6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 arp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          arp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unknown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* L2Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch.L2Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_dst = 1;
  if (this->mac_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_mac_dst(), target);
  }

  // uint32 ipv4 = 2;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ipv4(), target);
  }

  // uint32 ipv6 = 3;
  if (this->ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ipv6(), target);
  }

  // uint32 arp = 4;
  if (this->arp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_arp(), target);
  }

  // uint32 unknown = 5;
  if (this->unknown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch.L2Summary)
  return target;
}

size_t L2Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.L2Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 mac_dst = 1;
  if (this->mac_dst() != 0) {
    total_size += 1 + 8;
  }

  // uint32 ipv4 = 2;
  if (this->ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv4());
  }

  // uint32 ipv6 = 3;
  if (this->ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv6());
  }

  // uint32 arp = 4;
  if (this->arp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_arp());
  }

  // uint32 unknown = 5;
  if (this->unknown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unknown());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L2Summary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const L2Summary*>(
      &from));
}

void L2Summary::MergeFrom(const L2Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.L2Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac_dst() != 0) {
    _internal_set_mac_dst(from._internal_mac_dst());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (from.ipv6() != 0) {
    _internal_set_ipv6(from._internal_ipv6());
  }
  if (from.arp() != 0) {
    _internal_set_arp(from._internal_arp());
  }
  if (from.unknown() != 0) {
    _internal_set_unknown(from._internal_unknown());
  }
}

void L2Summary::CopyFrom(const L2Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.L2Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2Summary::IsInitialized() const {
  return true;
}

void L2Summary::InternalSwap(L2Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2Summary, unknown_)
      + sizeof(L2Summary::unknown_)
      - PROTOBUF_FIELD_OFFSET(L2Summary, mac_dst_)>(
          reinterpret_cast<char*>(&mac_dst_),
          reinterpret_cast<char*>(&other->mac_dst_));
}

std::string L2Summary::GetTypeName() const {
  return "epoch.L2Summary";
}


// ===================================================================

void DeviceComm::InitAsDefaultInstance() {
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_33_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_ff_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_01_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
  ::epoch::_DeviceComm_default_instance_._instance.get_mutable()->bcast_xx_ = const_cast< ::epoch::L2Summary*>(
      ::epoch::L2Summary::internal_default_instance());
}
class DeviceComm::_Internal {
 public:
  static const ::epoch::L2Summary& bcast_33(const DeviceComm* msg);
  static const ::epoch::L2Summary& bcast_ff(const DeviceComm* msg);
  static const ::epoch::L2Summary& bcast_01(const DeviceComm* msg);
  static const ::epoch::L2Summary& bcast_xx(const DeviceComm* msg);
};

const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_33(const DeviceComm* msg) {
  return *msg->bcast_33_;
}
const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_ff(const DeviceComm* msg) {
  return *msg->bcast_ff_;
}
const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_01(const DeviceComm* msg) {
  return *msg->bcast_01_;
}
const ::epoch::L2Summary&
DeviceComm::_Internal::bcast_xx(const DeviceComm* msg) {
  return *msg->bcast_xx_;
}
DeviceComm::DeviceComm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  tx_summary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epoch.DeviceComm)
}
DeviceComm::DeviceComm(const DeviceComm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tx_summary_(from.tx_summary_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bcast_33()) {
    bcast_33_ = new ::epoch::L2Summary(*from.bcast_33_);
  } else {
    bcast_33_ = nullptr;
  }
  if (from._internal_has_bcast_ff()) {
    bcast_ff_ = new ::epoch::L2Summary(*from.bcast_ff_);
  } else {
    bcast_ff_ = nullptr;
  }
  if (from._internal_has_bcast_01()) {
    bcast_01_ = new ::epoch::L2Summary(*from.bcast_01_);
  } else {
    bcast_01_ = nullptr;
  }
  if (from._internal_has_bcast_xx()) {
    bcast_xx_ = new ::epoch::L2Summary(*from.bcast_xx_);
  } else {
    bcast_xx_ = nullptr;
  }
  mac_src_ = from.mac_src_;
  // @@protoc_insertion_point(copy_constructor:epoch.DeviceComm)
}

void DeviceComm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceComm_epoch_2eproto.base);
  ::memset(&bcast_33_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mac_src_) -
      reinterpret_cast<char*>(&bcast_33_)) + sizeof(mac_src_));
}

DeviceComm::~DeviceComm() {
  // @@protoc_insertion_point(destructor:epoch.DeviceComm)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceComm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bcast_33_;
  if (this != internal_default_instance()) delete bcast_ff_;
  if (this != internal_default_instance()) delete bcast_01_;
  if (this != internal_default_instance()) delete bcast_xx_;
}

void DeviceComm::ArenaDtor(void* object) {
  DeviceComm* _this = reinterpret_cast< DeviceComm* >(object);
  (void)_this;
}
void DeviceComm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceComm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceComm& DeviceComm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceComm_epoch_2eproto.base);
  return *internal_default_instance();
}


void DeviceComm::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.DeviceComm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_summary_.Clear();
  if (GetArena() == nullptr && bcast_33_ != nullptr) {
    delete bcast_33_;
  }
  bcast_33_ = nullptr;
  if (GetArena() == nullptr && bcast_ff_ != nullptr) {
    delete bcast_ff_;
  }
  bcast_ff_ = nullptr;
  if (GetArena() == nullptr && bcast_01_ != nullptr) {
    delete bcast_01_;
  }
  bcast_01_ = nullptr;
  if (GetArena() == nullptr && bcast_xx_ != nullptr) {
    delete bcast_xx_;
  }
  bcast_xx_ = nullptr;
  mac_src_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceComm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.L2Summary tx_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tx_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_33 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bcast_33(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_ff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bcast_ff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_01 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bcast_01(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epoch.L2Summary bcast_XX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bcast_xx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceComm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch.DeviceComm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_mac_src(), target);
  }

  // repeated .epoch.L2Summary tx_summary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tx_summary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tx_summary(i), target, stream);
  }

  // .epoch.L2Summary bcast_33 = 3;
  if (this->has_bcast_33()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bcast_33(this), target, stream);
  }

  // .epoch.L2Summary bcast_ff = 4;
  if (this->has_bcast_ff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bcast_ff(this), target, stream);
  }

  // .epoch.L2Summary bcast_01 = 5;
  if (this->has_bcast_01()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bcast_01(this), target, stream);
  }

  // .epoch.L2Summary bcast_XX = 6;
  if (this->has_bcast_xx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bcast_xx(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch.DeviceComm)
  return target;
}

size_t DeviceComm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.DeviceComm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch.L2Summary tx_summary = 2;
  total_size += 1UL * this->_internal_tx_summary_size();
  for (const auto& msg : this->tx_summary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .epoch.L2Summary bcast_33 = 3;
  if (this->has_bcast_33()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_33_);
  }

  // .epoch.L2Summary bcast_ff = 4;
  if (this->has_bcast_ff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_ff_);
  }

  // .epoch.L2Summary bcast_01 = 5;
  if (this->has_bcast_01()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_01_);
  }

  // .epoch.L2Summary bcast_XX = 6;
  if (this->has_bcast_xx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bcast_xx_);
  }

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceComm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceComm*>(
      &from));
}

void DeviceComm::MergeFrom(const DeviceComm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.DeviceComm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_summary_.MergeFrom(from.tx_summary_);
  if (from.has_bcast_33()) {
    _internal_mutable_bcast_33()->::epoch::L2Summary::MergeFrom(from._internal_bcast_33());
  }
  if (from.has_bcast_ff()) {
    _internal_mutable_bcast_ff()->::epoch::L2Summary::MergeFrom(from._internal_bcast_ff());
  }
  if (from.has_bcast_01()) {
    _internal_mutable_bcast_01()->::epoch::L2Summary::MergeFrom(from._internal_bcast_01());
  }
  if (from.has_bcast_xx()) {
    _internal_mutable_bcast_xx()->::epoch::L2Summary::MergeFrom(from._internal_bcast_xx());
  }
  if (from.mac_src() != 0) {
    _internal_set_mac_src(from._internal_mac_src());
  }
}

void DeviceComm::CopyFrom(const DeviceComm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.DeviceComm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceComm::IsInitialized() const {
  return true;
}

void DeviceComm::InternalSwap(DeviceComm* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  tx_summary_.InternalSwap(&other->tx_summary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceComm, mac_src_)
      + sizeof(DeviceComm::mac_src_)
      - PROTOBUF_FIELD_OFFSET(DeviceComm, bcast_33_)>(
          reinterpret_cast<char*>(&bcast_33_),
          reinterpret_cast<char*>(&other->bcast_33_));
}

std::string DeviceComm::GetTypeName() const {
  return "epoch.DeviceComm";
}


// ===================================================================

void AddrAssoc::InitAsDefaultInstance() {
}
class AddrAssoc::_Internal {
 public:
};

AddrAssoc::AddrAssoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epoch.AddrAssoc)
}
AddrAssoc::AddrAssoc(const AddrAssoc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&mac_src_, &from.mac_src_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4_) -
    reinterpret_cast<char*>(&mac_src_)) + sizeof(ipv4_));
  // @@protoc_insertion_point(copy_constructor:epoch.AddrAssoc)
}

void AddrAssoc::SharedCtor() {
  ::memset(&mac_src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&mac_src_)) + sizeof(ipv4_));
}

AddrAssoc::~AddrAssoc() {
  // @@protoc_insertion_point(destructor:epoch.AddrAssoc)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddrAssoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddrAssoc::ArenaDtor(void* object) {
  AddrAssoc* _this = reinterpret_cast< AddrAssoc* >(object);
  (void)_this;
}
void AddrAssoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddrAssoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddrAssoc& AddrAssoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddrAssoc_epoch_2eproto.base);
  return *internal_default_instance();
}


void AddrAssoc::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.AddrAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mac_src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&mac_src_)) + sizeof(ipv4_));
  _internal_metadata_.Clear<std::string>();
}

const char* AddrAssoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed32 ipv4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddrAssoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch.AddrAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_mac_src(), target);
  }

  // fixed32 ipv4 = 2;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_ipv4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch.AddrAssoc)
  return target;
}

size_t AddrAssoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.AddrAssoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 ipv4 = 2;
  if (this->ipv4() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddrAssoc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddrAssoc*>(
      &from));
}

void AddrAssoc::MergeFrom(const AddrAssoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.AddrAssoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac_src() != 0) {
    _internal_set_mac_src(from._internal_mac_src());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
}

void AddrAssoc::CopyFrom(const AddrAssoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.AddrAssoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrAssoc::IsInitialized() const {
  return true;
}

void AddrAssoc::InternalSwap(AddrAssoc* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddrAssoc, ipv4_)
      + sizeof(AddrAssoc::ipv4_)
      - PROTOBUF_FIELD_OFFSET(AddrAssoc, mac_src_)>(
          reinterpret_cast<char*>(&mac_src_),
          reinterpret_cast<char*>(&other->mac_src_));
}

std::string AddrAssoc::GetTypeName() const {
  return "epoch.AddrAssoc";
}


// ===================================================================

void ArpAssoc::InitAsDefaultInstance() {
}
class ArpAssoc::_Internal {
 public:
};

ArpAssoc::ArpAssoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  table_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epoch.ArpAssoc)
}
ArpAssoc::ArpAssoc(const ArpAssoc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      table_row_(from.table_row_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mac_src_ = from.mac_src_;
  // @@protoc_insertion_point(copy_constructor:epoch.ArpAssoc)
}

void ArpAssoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArpAssoc_epoch_2eproto.base);
  mac_src_ = PROTOBUF_ULONGLONG(0);
}

ArpAssoc::~ArpAssoc() {
  // @@protoc_insertion_point(destructor:epoch.ArpAssoc)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ArpAssoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArpAssoc::ArenaDtor(void* object) {
  ArpAssoc* _this = reinterpret_cast< ArpAssoc* >(object);
  (void)_this;
}
void ArpAssoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArpAssoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArpAssoc& ArpAssoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArpAssoc_epoch_2eproto.base);
  return *internal_default_instance();
}


void ArpAssoc::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.ArpAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_row_.Clear();
  mac_src_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* ArpAssoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 mac_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mac_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.AddrAssoc table_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArpAssoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch.ArpAssoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_mac_src(), target);
  }

  // repeated .epoch.AddrAssoc table_row = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_table_row(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch.ArpAssoc)
  return target;
}

size_t ArpAssoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.ArpAssoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epoch.AddrAssoc table_row = 2;
  total_size += 1UL * this->_internal_table_row_size();
  for (const auto& msg : this->table_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 mac_src = 1;
  if (this->mac_src() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArpAssoc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ArpAssoc*>(
      &from));
}

void ArpAssoc::MergeFrom(const ArpAssoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.ArpAssoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_row_.MergeFrom(from.table_row_);
  if (from.mac_src() != 0) {
    _internal_set_mac_src(from._internal_mac_src());
  }
}

void ArpAssoc::CopyFrom(const ArpAssoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.ArpAssoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArpAssoc::IsInitialized() const {
  return true;
}

void ArpAssoc::InternalSwap(ArpAssoc* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  table_row_.InternalSwap(&other->table_row_);
  swap(mac_src_, other->mac_src_);
}

std::string ArpAssoc::GetTypeName() const {
  return "epoch.ArpAssoc";
}


// ===================================================================

void EpochStep::InitAsDefaultInstance() {
}
class EpochStep::_Internal {
 public:
};

EpochStep::EpochStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  enter_l2devices_(arena),
  l2_dev_comm_(arena),
  enter_l2_ipv4_addr_src_(arena),
  enter_arp_table_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epoch.EpochStep)
}
EpochStep::EpochStep(const EpochStep& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      enter_l2devices_(from.enter_l2devices_),
      l2_dev_comm_(from.l2_dev_comm_),
      enter_l2_ipv4_addr_src_(from.enter_l2_ipv4_addr_src_),
      enter_arp_table_(from.enter_arp_table_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epoch.EpochStep)
}

void EpochStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EpochStep_epoch_2eproto.base);
}

EpochStep::~EpochStep() {
  // @@protoc_insertion_point(destructor:epoch.EpochStep)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EpochStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EpochStep::ArenaDtor(void* object) {
  EpochStep* _this = reinterpret_cast< EpochStep* >(object);
  (void)_this;
}
void EpochStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochStep& EpochStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochStep_epoch_2eproto.base);
  return *internal_default_instance();
}


void EpochStep::Clear() {
// @@protoc_insertion_point(message_clear_start:epoch.EpochStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enter_l2devices_.Clear();
  l2_dev_comm_.Clear();
  enter_l2_ipv4_addr_src_.Clear();
  enter_arp_table_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EpochStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 enter_l2devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_enter_l2devices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_enter_l2devices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .epoch.DeviceComm l2_dev_comm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_l2_dev_comm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enter_l2_ipv4_addr_src(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .epoch.ArpAssoc enter_arp_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enter_arp_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epoch.EpochStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 enter_l2devices = 1;
  if (this->_internal_enter_l2devices_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_enter_l2devices(), target);
  }

  // repeated .epoch.DeviceComm l2_dev_comm = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_l2_dev_comm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_l2_dev_comm(i), target, stream);
  }

  // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enter_l2_ipv4_addr_src_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_enter_l2_ipv4_addr_src(i), target, stream);
  }

  // repeated .epoch.ArpAssoc enter_arp_table = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enter_arp_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_enter_arp_table(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epoch.EpochStep)
  return target;
}

size_t EpochStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epoch.EpochStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 enter_l2devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_enter_l2devices_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enter_l2devices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .epoch.DeviceComm l2_dev_comm = 2;
  total_size += 1UL * this->_internal_l2_dev_comm_size();
  for (const auto& msg : this->l2_dev_comm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .epoch.AddrAssoc enter_l2_ipv4_addr_src = 3;
  total_size += 1UL * this->_internal_enter_l2_ipv4_addr_src_size();
  for (const auto& msg : this->enter_l2_ipv4_addr_src_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .epoch.ArpAssoc enter_arp_table = 4;
  total_size += 1UL * this->_internal_enter_arp_table_size();
  for (const auto& msg : this->enter_arp_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochStep::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EpochStep*>(
      &from));
}

void EpochStep::MergeFrom(const EpochStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epoch.EpochStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enter_l2devices_.MergeFrom(from.enter_l2devices_);
  l2_dev_comm_.MergeFrom(from.l2_dev_comm_);
  enter_l2_ipv4_addr_src_.MergeFrom(from.enter_l2_ipv4_addr_src_);
  enter_arp_table_.MergeFrom(from.enter_arp_table_);
}

void EpochStep::CopyFrom(const EpochStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epoch.EpochStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochStep::IsInitialized() const {
  return true;
}

void EpochStep::InternalSwap(EpochStep* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  enter_l2devices_.InternalSwap(&other->enter_l2devices_);
  l2_dev_comm_.InternalSwap(&other->l2_dev_comm_);
  enter_l2_ipv4_addr_src_.InternalSwap(&other->enter_l2_ipv4_addr_src_);
  enter_arp_table_.InternalSwap(&other->enter_arp_table_);
}

std::string EpochStep::GetTypeName() const {
  return "epoch.EpochStep";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epoch::L2Summary* Arena::CreateMaybeMessage< ::epoch::L2Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch::L2Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::DeviceComm* Arena::CreateMaybeMessage< ::epoch::DeviceComm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch::DeviceComm >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::AddrAssoc* Arena::CreateMaybeMessage< ::epoch::AddrAssoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch::AddrAssoc >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::ArpAssoc* Arena::CreateMaybeMessage< ::epoch::ArpAssoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch::ArpAssoc >(arena);
}
template<> PROTOBUF_NOINLINE ::epoch::EpochStep* Arena::CreateMaybeMessage< ::epoch::EpochStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epoch::EpochStep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
